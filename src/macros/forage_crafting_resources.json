{
	"name": "Forage Crafting Resources",
	"type": "script",
	"author": "BRial3lkTUItF0fP",
	"img": "icons/commodities/flowers/flower-green.webp",
	"scope": "global",
	"command": "// Editable values (or at least, ones I suggest):\n\nconst skillName = \"survival\";\nconst rawTraits = [\"downtime\"];\nconst actionName = \"Forage Crafting Resources\";\n\n// End of editable values\n\nif (!token) {\n    ui.notifications.warn(\"Please select a token!\");\n    return;\n}\n\nconst actor = token.actor;\n\nconst dialogForm = `<form>\n    <body>\n        <section>\n            <h1>Forage Crafting Materials</h1>\n        </section>\n    </body>\n    <div class=\"form-group\">\n        <label for=\"taskLevel\">Task Level:</label>\n        <input type=\"number\" name=\"taskLevel\" id=\"taskLevel\" value=0 min=0 max=20>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"DC\">DC:</label>\n        <input type=\"number\" name=\"DC\" id=\"DC\" value=0 min=0>\n    </div>\n</form>`;\n\nconst dialogResults = await Dialog.wait({\n    title: \"Forage Crafting Resources\",\n    content: dialogForm,\n    buttons: {\n        ok: {\n            label: \"Forage\",\n            icon: \"<i class='fa-solid fa-wheat-awn'></i>\",\n            callback: (html) => {\n                return {\n                    DC: $(html).find(\"#DC\")[0].value || 0,\n                    level: $(html).find(\"#taskLevel\")[0].value || 0\n                };\n            }\n        },\n        cancel: {\n            label: \"Cancel\",\n            icon: \"<i class='fa-solid fa-ban'></i>\",\n        }\n    },\n    default: \"ok\",\n}, { width: 350 });\n\nif (dialogResults === \"cancel\") return;\n\nconst modifiers = [];\nconst traits = [];\nconst extraRollNotes = [];\n\nconst statistic = actor.getStatistic(skillName);\nconst harvestSkillCheck = statistic.extend({\n    check: {\n        label: `${actionName}`\n    },\n    rank: statistic.rank,\n    rollOptions: [`action:forage`],\n    slug: \"action-forage-harvesting-resources\"\n});\nconst actorRollOptions = actor.getRollOptions();\n\nconst baseGatheredIncome = game.pf2e.Coins.fromString(game.pf2eHeroicCrafting.HeroicCraftingGatheredIncome[dialogResults.level]);\nlet gatheredIncome = baseGatheredIncome;\n\n{\n    // Default Notes\n\n    extraRollNotes.push({\n        \"outcome\": [\"success\", \"criticalSuccess\"],\n        \"text\": \"<p><strong>Success</strong> Add the amount listed on Table 2: Gathered Income for the location's level to your Material Trove each day. If you are a master in Survival, instead add twice as much.</p>\"\n    });\n    extraRollNotes.push({\n        \"outcome\": [\"failure\", \"criticalFailure\"],\n        \"text\": \"<p><strong>Failure</strong> You find no materials.</p>\"\n    });\n}\n{\n    // Converting raw traits into actual traits\n\n    const actionTraits = CONFIG.PF2E.actionTraits;\n    const traitDescriptions = CONFIG.PF2E.traitsDescriptions;\n\n    rawTraits\n        .map((trait) => ({\n            description: traitDescriptions[trait],\n            name: trait,\n            label: actionTraits[trait] ?? trait,\n        }))\n        .forEach(traitObject => traits.push(traitObject));\n}\n\n{\n    // If master in survival, double the crafting resources got\n\n    if (harvestSkillCheck.rank >= 3) {\n        gatheredIncome = gatheredIncome.add(baseGatheredIncome);\n    }\n}\n{\n    // Vigilant Forager\n    if (actorRollOptions.includes(\"feat:vigilant-forager\")) {\n        modifiers.push(\n            new game.pf2e.Modifier({\n                slug: \"vigilant-forager-penalty\",\n                label: \"Vigilant Forager (after 8 hours or less)\",\n                modifier: -5,\n                predicate: [\"8-hours-or-less-of-exploration\"],\n            })\n        );\n    }\n}\n\nharvestSkillCheck.roll({\n    extraRollNotes,\n    dc: dialogResults.DC === 0 ? null : {\n        value: dialogResults.DC\n    },\n    traits,\n    createMessage: false,\n    [`callback`]: async (roll, outcome, message, event) => {\n        if (message instanceof ChatMessage) {\n            let extraFlavour = ``;\n\n            // Practiced Forager\n            if (outcome === \"criticalSuccess\" && actorRollOptions.includes(\"feat:practiced-forager\")) {\n                gatheredIncome = gatheredIncome.add(baseGatheredIncome);\n            }\n\n            // General Summary\n            if (outcome === \"success\" || outcome === \"criticalSuccess\") {\n                extraFlavour = extraFlavour.concat(`<hr> <p><strong>Foundry Note</strong> You find <strong>${gatheredIncome.toString()}</strong> worth of materials. You can use the @UUID[Compendium.pf2e-heroic-crafting-automation.heroic-crafting-macros.HMpC7FAjshFyGOlQ]{Refill Material Troves} macro to add this value to your Material Troves.</p>`);\n            }\n\n            message.updateSource({ flavor: message.flavor + extraFlavour });\n            ChatMessage.create(message.toObject());\n        }\n    }\n});",
	"flags": {
		"core": {
			"sourceId": "Compendium.pf2e-heroic-crafting-automation.heroic-crafting-automation-macros.Item.ygPS9KQ4kgZEwpFY"
		}
	},
	"_id": "ygPS9KQ4kgZEwpFY",
	"sort": 0,
	"_key": "!macros!ygPS9KQ4kgZEwpFY",
	"ownership": {
		"default": 0
	}
}